"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/[data]";
exports.ids = ["pages/api/[data]"];
exports.modules = {

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "(api)/./pages/api/[data].js":
/*!*****************************!*\
  !*** ./pages/api/[data].js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_0__);\n// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\n\nlet allowences_names1 = [\n    \"ledger\",\n    \"balances\"\n];\nlet allowences_names2 = [\n    \"allowances\",\n    \"approvals\",\n    \"operators\"\n];\nlet allowences_names3 = [\n    \"operator\",\n    \"spender\"\n];\nlet api_testnet = \"https://api.ghostnet.tzkt.io/v1/\";\nlet address_testnet = \"KT1UsUJkhrD2TRb4NmqmaoUQw3XDBdB2dKZY\";\nlet opts_get = {\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n};\nlet isObject = (obj)=>typeof obj === \"object\" && obj !== null;\nasync function get_allowence(contract, owner, operator, token_id) {\n    let storage = await (await fetch(api_testnet + `contracts/${contract}/storage`, opts_get)).json();\n    let get_keys_rec = (obj, stp)=>{\n        let res1 = [];\n        let res2 = [];\n        if (!isObject(obj) || stp > 12) return [\n            res1,\n            res2\n        ];\n        Object.keys(obj).map((key)=>{\n            if (allowences_names1.includes(key)) {\n                res1.push(obj[key]);\n                return;\n            }\n            if (allowences_names2.includes(key)) {\n                res2.push(obj[key]);\n                return;\n            }\n            let [r1, r2] = get_keys_rec(obj[key], stp + 1);\n            res1 = [\n                ...res1,\n                ...r1\n            ];\n            res2 = [\n                ...res2,\n                ...r2\n            ];\n        });\n        return [\n            res1,\n            res2\n        ];\n    };\n    // if(contract === \"KT1PoHKRwgpWqxvnrvsc3PSEJgzQyYTmMTRW\"){\n    //   console.log(\"Unic!!!\", get_keys_rec(storage), storage);\n    // }\n    // console.log(\"BIGMAPS KEYS\", Object.keys(storage), storage, api_testnet + `contracts/${contract}/storage`, typeof storage);\n    let [r1, r2] = get_keys_rec(storage);\n    let bigmap = r2.length > 0 ? r2[0] : r1[0];\n    let allowences1 = await (await fetch(api_testnet + `bigmaps/${bigmap}/keys?key=${owner}`, opts_get)).json();\n    let allowences2 = await (await fetch(api_testnet + `bigmaps/${bigmap}/keys?key.owner=${owner}`, opts_get)).json();\n    let allowences3 = await (await fetch(api_testnet + `bigmaps/${bigmap}/keys?key.address_0=${owner}`, opts_get)).json();\n    let allowances = [];\n    if (allowences1.length > 0) {\n        allowances = allowences1;\n    }\n    if (allowences2.length > 0) {\n        allowances = allowences2;\n    }\n    if (allowences3.length > 0) {\n        allowances = allowences3;\n    }\n    let allowance_exist = (allowance)=>{\n        // if(contract === \"KT1PzyU2nXYW8RkoFqmqWPFCA7bgC7yGNRoC\" && operator === \"KT193W4yQZXLwLfW6wzvgVdUYncnC5imvWUq\"){\n        //   console.log(\"Here\");\n        //   return false;\n        // }\n        if (allowance.active === false) return false;\n        if (typeof allowance.key.nat !== \"undefined\" && typeof allowance.key.address_1 !== \"undefined\" && allowance.key.nat !== null && allowance.key.address_1 !== null && parseInt(allowance.key.nat) === parseInt(token_id) && allowance.key.address_1 === operator) return true;\n        if (typeof allowance.key.token_id !== \"undefined\" && allowance.key.token_id !== null && parseInt(allowance.key.token_id) !== parseInt(token_id)) return false;\n        let key_operator = allowences_names3.filter((key)=>typeof allowance.key[key] !== \"undefined\" && allowance.key[key] !== null && allowance.key[key] === operator);\n        if (key_operator.length > 0) return true;\n        key_operator = [];\n        key_operator = Object.keys(allowance.key).filter((key)=>typeof allowance.key[key] !== \"undefined\" && allowance.key[key] !== null && allowance.key[key] === operator);\n        if (key_operator.length > 0) return true;\n        if (allowance.value === operator) return true;\n        if (!isObject(allowance.value)) return false;\n        if (typeof allowance.value[operator] !== \"undefined\" && allowance.value[operator] !== null && allowance.value[operator] !== 0 && allowance.value[operator] !== \"0\") return true;\n        let val_operator = Object.keys(allowance.value).filter((key)=>allowance.value[key] !== \"undefined\" && allowance.value[key] !== null && allowance.value[key] === operator);\n        if (val_operator.length > 0) return true;\n        val_operator = [];\n        val_operator = allowences_names3.filter((key)=>allowance.value[key] !== \"undefined\" && allowance.value[key] !== null && allowance.value[key] === operator);\n        if (val_operator.length > 0) return true;\n        val_operator = [];\n        let val = allowences_names2.filter((key)=>typeof allowance.value[key] !== \"undefined\" && allowance.value[key] !== null)[0];\n        if (allowance.value[val] === operator) return true;\n        if (!isObject(allowance.value[val])) return false;\n        if (typeof allowance.value[val][operator] !== \"undefined\" && allowance.value[val][operator] !== null && allowance.value[val][operator] !== 0 && allowance.value[val][operator] !== \"0\") return true;\n        val_operator = Object.keys(allowance.value[val]).filter((key)=>allowance.value[val][key] !== \"undefined\" && allowance.value[val][key] !== null && allowance.value[val][key] === operator);\n        if (val_operator.length > 0) return true;\n        return false;\n    };\n    let filtered_allowences = allowances.filter(allowance_exist);\n    return filtered_allowences.length > 0;\n//return [filtered_allowences.length > 0, contract, allowances, filtered_allowences];\n}\nasync function handler(req, res) {\n    let url = req.url;\n    if (url.charAt(url.length - 1) === \"/\") url = url.slice(0, -1);\n    url = url.split(\"/\");\n    let query = {};\n    query = url[url.length - 1].split(\"!\")[1];\n    if (typeof query === \"undefined\") query = {};\n    else query = Object.fromEntries(new Map(query.split(\"&\").map((el)=>el.split(\"=\"))));\n    // console.log(\"Query\", query);\n    // let query = {};\n    let bigmap = await (await fetch(api_testnet + `contracts/${address_testnet}/storage`, opts_get)).json();\n    let data = await (await fetch(api_testnet + `bigmaps/${bigmap}/keys`, opts_get)).json();\n    data = data.filter((d)=>!(d.key.token_id === \"6861\" && d.key.contract === \"KT1GG8Zd5rUp1XV8nMPRBY2tSyVn6NR5F4Q1\" && d.key.address === \"tz1h7Tek85LYJPBpG8e5xqCZPAvSMu97tenm\" || d.key.token_id === \"6860\" && d.key.contract === \"KT1Wdq6sj3ZkNqQ7CeE6kTNbJXfobMX7Eqpz\" && d.key.address === \"tz1h7Tek85LYJPBpG8e5xqCZPAvSMu97tenm\"));\n    if (typeof query.contract !== \"undefined\" && query.contract !== null) data = data.filter((d)=>d.key.contract === query.contract);\n    if (typeof query.owner !== \"undefined\" && query.owner !== null) data = data.filter((d)=>d.key.address === query.owner);\n    if (typeof query.token_id !== \"undefined\" && query.token_id !== null) data = data.filter((d)=>d.key.token_id === query.token_id);\n    let allowed_data = await Promise.all(data.map(async (d)=>await get_allowence(d.key.contract, d.key.address, address_testnet, d.key.token_id)));\n    data = data.filter((_, i)=>allowed_data[i]);\n    data = await Promise.all(data.map(async (d)=>{\n        let fee = d.value.numerator / d.value.denominator;\n        d.fee = fee;\n        let acc = (await (await fetch(api_testnet + `tokens/balances?account=${d.key.address}&token.contract=${d.key.contract}&&token.tokenID=${d.key.token_id}`, opts_get)).json())[0];\n        d.metadata = acc.token.metadata;\n        d.balance = acc.balance / Math.pow(10, acc.token.metadata.decimals);\n        return d;\n    }));\n    data.sort((d1, d2)=>{\n        let res = 0;\n        if (d1.key.contract > d2.key.contract) res = 1;\n        else if (d1.key.contract === d2.key.contract) res = 0;\n        else res = -1;\n        if (res !== 0) return res;\n        if (d1.key.token_id > d2.key.token_id) res = 1;\n        else if (d1.key.token_id === d2.key.token_id) res = 0;\n        else res = -1;\n        if (res !== 0 || typeof query.sort === \"undefined\" || query.sort === null) return res;\n        if (query.sort === \"fee\") {\n            if (d1.fee < d2.fee) res = -1;\n            else if (d1.fee === d2.fee) res = 0;\n            else res = 1;\n            if (res !== 0) return res;\n            if (d1.balance > d2.balance) res = -1;\n            else if (d1.fee === d2.fee) res = 0;\n            else res = 1;\n            return res;\n        } else if (query.sort === \"quantity\") {\n            if (d1.balance > d2.balance) res = -1;\n            else if (d1.fee === d2.fee) res = 0;\n            else res = 1;\n            if (res !== 0) return res;\n            if (d1.fee < d2.fee) res = -1;\n            else if (d1.fee === d2.fee) res = 0;\n            else res = 1;\n            return res;\n        }\n        return res;\n    });\n    data = data.map((d)=>{\n        return {\n            assets_item: {\n                asset_id: {\n                    asset_type: d.key.asset_type,\n                    contract: d.key.contract,\n                    token_id: d.key.token_id\n                },\n                owner: d.key.address,\n                quantity: d.balance\n            },\n            fee: d.fee\n        };\n    });\n    res.status(200).json(data);\n//res.status(200).json({ name: 'John Doe' })\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/[data].js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/[data].js"));
module.exports = __webpack_exports__;

})();